#include <lcom/lcf.h>
#include <lcom/timer.h>

#include <stdint.h>

#include "i8254.h"

uint32_t counter;
int timerID = 0;

int(timer_set_frequency)(uint8_t timer, uint32_t freq) {

  if (timer < 0 || timer > 2)
    return 1;

  uint8_t MSB;
  uint8_t LSB;

  uint32_t value = 1193181 / freq;

  util_get_MSB(value, &MSB);
  util_get_LSB(value, &LSB);

  uint32_t byte1;
  sys_inb(TIMER_CTRL, &byte1); //byte1 contem estado do timer

  switch (timer) {
    case 0:
      byte1 = (byte1 & 0x0f) | TIMER_0 | TIMER_LSB_MSB;
      sys_outb(TIMER_CTRL, byte1);
      sys_outb(TIMER_0, LSB);
      sys_outb(TIMER_0, MSB);

    case 1:
      byte1 = (byte1 & 0x0f) | TIMER_1 | TIMER_LSB_MSB;
      sys_outb(TIMER_CTRL, byte1);
      sys_outb(TIMER_1, LSB);
      sys_outb(TIMER_1, MSB);

    case 2:
      byte1 = (byte1 & 0x0f) | TIMER_2 | TIMER_LSB_MSB;
      sys_outb(TIMER_CTRL, byte1);
      sys_outb(TIMER_2, LSB);
      sys_outb(TIMER_2, MSB);
  }

  return 0;
}

int(timer_subscribe_int)(uint8_t *bit_no) {
  (*bit_no) = BIT(timerID);
  if (sys_irqsetpolicy(TIMER0_IRQ, IRQ_REENABLE, &timerID) != 0) {
    printf("Error:The program can't unsubscribe the interrupt of the associated hook id\n");
    return 1;
  }

  return 0;
}

int(timer_unsubscribe_int)() {

  if (sys_irqrmpolicy(&timerID) != 0) {
    printf("Error: failed to enable an interrupt\n");
    return 1;
  }

  return 0;
}

void(timer_int_handler)() {
  counter++;
  return;
}

int(timer_get_conf)(uint8_t timer, uint8_t *st) {

  if (timer < 0 || timer > 2) {
    printf("Please insert a valid timer");
    return 1;
  }

  unsigned long rbc = TIMER_RB_CMD | TIMER_RB_SEL(timer) | TIMER_RB_COUNT_;
  unsigned int rbc2;

  if (sys_outb(TIMER_CTRL, rbc) != 0) {
    printf("Error in sys_outb");
    return 1;
  }

  if (sys_inb(TIMER_0 + timer, &rbc2)) {
    printf("Error in sys_inb");
    return 1;
  }

  *st = (uint8_t) rbc2;

  return 0;
}

int(timer_display_conf)(uint8_t timer, uint8_t st,
                        enum timer_status_field field) {

  union timer_status_field_val u;

  if (field == all) {
    u.byte = st;
  }
  else if (field == initial) {
    u.in_mode = (st & (BIT(4) | BIT(5))) >> 4;
  }
  else if (field == mode) {
    u.count_mode = (st & (BIT(1) | BIT(2) | BIT(3))) >> 1;
  }
  else if (field == base) {
    u.bcd = st & BIT(0);
  }
  else {
    printf("Field is not valid");
    return 1;
  }

  int error_message = timer_print_config(timer, field, u);

  if (error_message != 0) {
    printf("Error in sys_inb");
    return error_message;
  }

  return 0;
}
